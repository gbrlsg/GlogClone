/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MonReq,
  PatchedMonReq,
} from '../models/index';
import {
    MonReqFromJSON,
    MonReqToJSON,
    PatchedMonReqFromJSON,
    PatchedMonReqToJSON,
} from '../models/index';

export interface MonitoringRequestsCreateRequest {
    monReq: Omit<MonReq, 'pk'|'status_display'>;
}

export interface MonitoringRequestsDestroyRequest {
    id: string;
}

export interface MonitoringRequestsPartialUpdateRequest {
    id: string;
    patchedMonReq?: Omit<PatchedMonReq, 'pk'|'status_display'>;
}

export interface MonitoringRequestsRetrieveRequest {
    id: string;
}

export interface MonitoringRequestsUpdateRequest {
    id: string;
    monReq: Omit<MonReq, 'pk'|'status_display'>;
}

/**
 * 
 */
export class MonitoringRequestsApi extends runtime.BaseAPI {

    /**
     */
    async monitoringRequestsCreateRaw(requestParameters: MonitoringRequestsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonReq>> {
        if (requestParameters['monReq'] == null) {
            throw new runtime.RequiredError(
                'monReq',
                'Required parameter "monReq" was null or undefined when calling monitoringRequestsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/monitoring-requests/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MonReqToJSON(requestParameters['monReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonReqFromJSON(jsonValue));
    }

    /**
     */
    async monitoringRequestsCreate(requestParameters: MonitoringRequestsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonReq> {
        const response = await this.monitoringRequestsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async monitoringRequestsDestroyRaw(requestParameters: MonitoringRequestsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling monitoringRequestsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/monitoring-requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async monitoringRequestsDestroy(requestParameters: MonitoringRequestsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.monitoringRequestsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async monitoringRequestsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonReq>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/monitoring-requests/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonReqFromJSON));
    }

    /**
     */
    async monitoringRequestsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonReq>> {
        const response = await this.monitoringRequestsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async monitoringRequestsPartialUpdateRaw(requestParameters: MonitoringRequestsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonReq>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling monitoringRequestsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/monitoring-requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedMonReqToJSON(requestParameters['patchedMonReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonReqFromJSON(jsonValue));
    }

    /**
     */
    async monitoringRequestsPartialUpdate(requestParameters: MonitoringRequestsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonReq> {
        const response = await this.monitoringRequestsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async monitoringRequestsRetrieveRaw(requestParameters: MonitoringRequestsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonReq>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling monitoringRequestsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/monitoring-requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonReqFromJSON(jsonValue));
    }

    /**
     */
    async monitoringRequestsRetrieve(requestParameters: MonitoringRequestsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonReq> {
        const response = await this.monitoringRequestsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async monitoringRequestsUpdateRaw(requestParameters: MonitoringRequestsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonReq>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling monitoringRequestsUpdate().'
            );
        }

        if (requestParameters['monReq'] == null) {
            throw new runtime.RequiredError(
                'monReq',
                'Required parameter "monReq" was null or undefined when calling monitoringRequestsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/monitoring-requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MonReqToJSON(requestParameters['monReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonReqFromJSON(jsonValue));
    }

    /**
     */
    async monitoringRequestsUpdate(requestParameters: MonitoringRequestsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonReq> {
        const response = await this.monitoringRequestsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
